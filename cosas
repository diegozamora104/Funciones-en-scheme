#lang racket

(define bintree
  (lambda (lsTrees funcion)
    (let foo((trees (cdr lsTrees))(fn funcion)(finalTree (car lsTrees)))
      (cond
        ((null? trees) finalTree)
        (()(navegar (car trees)(caadr trees)(caaddr trees)(car finalTree)(caadr finalTree)(caaddr finalTree) fn)) ))))


(define navegar
  (lambda (head treeL treeR finalHead finalTreeL finalTreeR fn)
      (navegar (if (null? treeL) treeL     ;treeL
                   (navegar (car treeL)(caadr treeL)(caaddr treeL)(car finalTreeL)(caadr finalTreeL)(caaddr finalTreeL) fn))
               (if (null? treeR) treeR     ;treeR
                   (navegar (car treeR)(caadr treeR)(caaddr treeR)(car finalTreeR)(caadr finalTreeR)(caaddr finalTreeR) fn))
               (fn head finalHead)
               (if (null? finalTreeL) finalTreeL     ;finalTreeL
                   (navegar (car treeL)(caadr treeL)(caaddr treeL)(car finalTreeL)(caadr finalTreeL)(caaddr finalTreeL) fn))
               (if (null? finalTreeR) finalTreeR     ;finalTreeR
                   (navegar (car treeR)(caadr treeR)(caaddr treeR)(car finalTreeR)(caadr finalTreeR)(caaddr finalTreeR) fn))
               fn)      
    ))
