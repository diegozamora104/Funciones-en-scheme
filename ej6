#lang racket

(define (reverse lista)
  (let func ((temp lista) (empty_list '()))
  (if (null? temp) (list->string empty_list)
      (func (cdr temp) (cons (car temp) empty_list))
        )
    )
  )

(define (analizador lista dic)
  (let func((temp lista) (texto '()) (diccionario dic))
    (cond
      ((null? temp) texto)
      ((equal? (caar diccionario) (car temp))((func temp (cons (car temp) texto) diccionario)))
      )
    )
  )
  
(define (final-boss frase dic)
  (let func ((word (string->list frase)) (invertido '()) (palabras '()))
    (cond
      ((equal? (car word) #\.) (analizador (cons (reverse invertido) palabras) dic))
      ((equal? (car word) #\space) (func (cdr word) '() (cons (reverse invertido) palabras)))
      (else
       (func (cdr word) (cons (car word) invertido) palabras ))
    )
   ) 
  )

;(final-boss "Hola mundo.")